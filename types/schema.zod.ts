/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from 'zod'
import { Json } from './database.types'

export const publicVisibilityTypeSchema = z.union([
  z.literal('public'),
  z.literal('private'),
  z.literal('friends'),
])

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
)

export const publicPredictionsRowSchemaSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  is_anonymous: z.boolean(),
  prediction: z.string(),
  question_id: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
})

export const publicPredictionsInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_anonymous: z.boolean().optional(),
  prediction: z.string(),
  question_id: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
})

export const publicPredictionsUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_anonymous: z.boolean().optional(),
  prediction: z.string().optional(),
  question_id: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
})

export const publicPredictionsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('fk_question'),
    columns: z.tuple([z.literal('question_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('questions'),
    referencedColumns: z.tuple([z.literal('id')]),
  }),
  z.object({
    foreignKeyName: z.literal('fk_user'),
    columns: z.tuple([z.literal('user_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('profiles'),
    referencedColumns: z.tuple([z.literal('id')]),
  }),
])

export const publicProfilesRowSchemaSchema = z.object({
  id: z.string(),
  username: z.string(),
})

export const publicProfilesInsertSchemaSchema = z.object({
  id: z.string(),
  username: z.string(),
})

export const publicProfilesUpdateSchemaSchema = z.object({
  id: z.string().optional(),
  username: z.string().optional(),
})

export const publicProfilesRelationshipsSchemaSchema = z.tuple([])

export const publicQuestionsRowSchemaSchema = z.object({
  allow_anonymous_predictions: z.boolean(),
  author_id: z.string(),
  created_at: z.string(),
  deadline: z.string(),
  description: z.string(),
  id: z.string(),
  is_active: z.boolean(),
  show_prediction_count: z.boolean(),
  title: z.string(),
  total_predictions: z.number(),
  view_count: z.number(),
  visibility: publicVisibilityTypeSchema,
})

export const publicQuestionsInsertSchemaSchema = z.object({
  allow_anonymous_predictions: z.boolean().optional(),
  author_id: z.string(),
  created_at: z.string().optional(),
  deadline: z.string(),
  description: z.string(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  show_prediction_count: z.boolean().optional(),
  title: z.string(),
  total_predictions: z.number().optional(),
  view_count: z.number().optional(),
  visibility: publicVisibilityTypeSchema.optional(),
})

export const publicQuestionsUpdateSchemaSchema = z.object({
  allow_anonymous_predictions: z.boolean().optional(),
  author_id: z.string().optional(),
  created_at: z.string().optional(),
  deadline: z.string().optional(),
  description: z.string().optional(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  show_prediction_count: z.boolean().optional(),
  title: z.string().optional(),
  total_predictions: z.number().optional(),
  view_count: z.number().optional(),
  visibility: publicVisibilityTypeSchema.optional(),
})

export const publicQuestionsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('fk_author'),
    columns: z.tuple([z.literal('author_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('profiles'),
    referencedColumns: z.tuple([z.literal('id')]),
  }),
])

export const publicGetPredictionsCountArgsSchemaSchema = z.object({
  question_id: z.string(),
})

export const publicGetPredictionsCountReturnsSchemaSchema = z.number()
